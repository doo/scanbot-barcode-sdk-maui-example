// This file has been autogenerated from a class added in the UI designer.

using BarcodeSDK.NET.iOS.Utils;
using ScanbotSDK.iOS;

namespace BarcodeSDK.NET.iOS.Controllers.ClassicComponents
{
    interface IBarcodeScanAndCountViewDelegate
    {
        List<SBSDKBarcodeScannerAccumulatingResult> ScannedBarcodes { get; set; }
        void UpdateScannedItems();
    }

    public partial class BarcodeScanAndCountViewController : UIViewController, IBarcodeScanAndCountViewDelegate
    {
        SBSDKBarcodeScanAndCountViewController viewController;
        public BarcodeScanAndCountViewController(IntPtr handle) : base(handle)
        {
        }

        #region IBarcodeScanAndCountViewDelegate Implementation

        public List<SBSDKBarcodeScannerAccumulatingResult> ScannedBarcodes { get; set; }

        public void UpdateScannedItems()
        {
            var count = (int)ScannedBarcodes.Sum(item => item.ScanCount);
            btnBarcodeCount.Title = string.Format("{0}: {1}", Texts.TotalItemsScanned, count);
        }

        #endregion

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ScannedBarcodes = new List<SBSDKBarcodeScannerAccumulatingResult>();
            var barcodeConfiguration = new SBSDKBarcodeFormatCommonConfiguration
            {
                Formats = BarcodeTypes.Instance.AcceptedTypes
            };
            
            var configuration = new SBSDKBarcodeScannerConfiguration
            {
                BarcodeFormatConfigurations = [barcodeConfiguration]
            };
            
            viewController = new(parentViewController: this, containerView, configuration);
            viewController.Delegate = new BarcodeScanAndCountViewDelegate(this);
        }

        partial void BtnShowResults_Action(UIBarButtonItem sender)
        {
            var viewController = Utilities.GetViewController<BarcodeScanAndCountResultViewController>(Texts.ClassicComponentStoryboard);
            viewController.NavigateData(ScannedBarcodes);
            this.NavigationController?.PushViewController(viewController, true);
        }
    }

    internal class BarcodeScanAndCountViewDelegate : SBSDKBarcodeScanAndCountViewControllerDelegate
    {
        private IBarcodeScanAndCountViewDelegate scanAndCountViewDelegate;

        internal BarcodeScanAndCountViewDelegate(IBarcodeScanAndCountViewDelegate scanAndCountViewDelegate)
        {
            this.scanAndCountViewDelegate = scanAndCountViewDelegate;
        }

        public override void DidScanBarcodes(SBSDKBarcodeScanAndCountViewController controller, SBSDKBarcodeItem[] codes)
        {
            foreach (var code in codes)
            {
                var existingBarcode = scanAndCountViewDelegate.ScannedBarcodes.Find(
                    item => item.Item.Format.Equals(code.Format) 
                            && item.Item.Text == code.Text);
                
                if (existingBarcode != null)
                {
                    existingBarcode.ScanCount += 1;
                }
                else
                {
                    scanAndCountViewDelegate.ScannedBarcodes.Add(new SBSDKBarcodeScannerAccumulatingResult(code));
                }
            }
            scanAndCountViewDelegate.UpdateScannedItems();
        }

        public override UIView OverlayForBarcode(SBSDKBarcodeScanAndCountViewController controller, SBSDKBarcodeItem item)
        {
            return new UIImageView(image: UIImage.CheckmarkImage);
        }
    }
}
